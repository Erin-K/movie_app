{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","className","MovieGenre","genre","Movie","title","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","baseOn","App","state","_renderMovies","console","log","movies","movie","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","res","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sVAmEA,SAASA,EAAT,GAAqC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IAC5B,OACE,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,UAAU,kBAI1C,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,MACnB,OACE,0BAAMF,UAAU,gBAAgBE,EAAhC,KAaWC,MAlEf,YAAoD,IAAnCC,EAAkC,EAAlCA,MAAOP,EAA2B,EAA3BA,OAAQQ,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACtC,OACE,yBAAKN,UAAU,SACb,yBAAKA,UAAU,kBACb,kBAACJ,EAAD,CAAaC,OAAQA,EAAQC,IAAKM,KAEpC,yBAAKJ,UAAU,kBACb,4BAAKI,GACL,yBAAKJ,UAAU,iBACZK,EAAOE,KAAI,SAACL,EAAMM,GAAP,OAAiB,kBAACP,EAAD,CAAYC,MAAOA,EAAOO,IAAKD,QAE9D,yBAAKR,UAAU,mBACb,kBAAC,IAAD,CACEU,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,OAAO,gBCiCJC,E,2MA9DbC,MAAQ,G,EAmBRC,cAAgB,WAad,OAZAC,QAAQC,IAAK,EAAKH,MAAMI,QACT,EAAKJ,MAAMI,OAAOb,KAAI,SAAAc,GAEnC,OADAH,QAAQC,IAAIE,GACL,kBAAC,EAAD,CACLjB,MAAOiB,EAAMC,cACbzB,OAAQwB,EAAME,mBACdd,IAAKY,EAAMG,GACXnB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,e,EAOtBmB,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLP,EADK,OAEXF,QAAQC,IAAIC,GACZ,EAAKQ,SAAS,CACZR,WAJS,2C,EAQbO,SAAW,WACT,OAAOE,MAAM,4EACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKb,UACvBc,OAAM,SAAAC,GAAG,OAAIjB,QAAQC,IAAIgB,O,mFAhC1BC,KAAKX,e,+BAqCLP,QAAQC,IAAIiB,KAAKpB,MAAMI,QAFhB,IAGCA,EAAWgB,KAAKpB,MAAhBI,OACR,OACE,yBAAKpB,UAAWoB,EAAS,MAAQ,gBAC7BA,EAASgB,KAAKnB,gBAAkB,e,GA9DxBoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.4c153120.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LineEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n// class Movie extends Component {\n  \n//   static propTypes = {\n//     title: PropTypes.string.isRequired,\n//     poster: PropTypes.string.isRequired\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <MoviePoster poster={this.props.poster} />\n//         <h1>{this.props.title}</h1>\n//       </div>\n//     )\n//   }\n// }\n\nfunction Movie ({title, poster, genres, synopsis}) { //functional code\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Columns\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className=\"Movie__Columns\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre,index) => <MovieGenre genre={genre} key={index} />)}\n        </div>\n        <div className=\"Movie__Synopsis\">\n          <LineEllipsis\n            text={synopsis}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            baseOn='letters'\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired,\n}\n\n// class MoviePoster extends Component {\n\n//   static propTypes = {\n//     poster: PropTypes.string.isRequired\n//   }\n\n//   render() {\n//     return (\n//       <img src={this.props.poster} />\n//     )\n//   }\n// }\n\nfunction MoviePoster({poster, alt}) { // willmount, didmount 등 필요없음 그럴때 만드는 것. render도 없고 라이프사이클도 없음. state도 없고. html을 리턴할뿐. 즉 상태변화(state)가 필요없는 컴포넌트는 functional code가 훨씬 코드가 간결함.\n  return (\n    <img src={poster} alt={alt} className=\"Movie__Poster\" />\n  )\n}\n\nfunction MovieGenre({genre}) {\n  return (\n    <span className=\"Movie__Genre\">{genre} </span>\n  )\n}\n\nMoviePoster.propTypes = { // functional 코드의 propTypes audtl\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie'\n\nclass App extends Component {\n\n  // react running order\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  // Update: componentWillRecieveProps -> shouldComponentUpdate() == true -> componentWillUpdate() // 로딩중 -> render() -> componentDidUpdate() //로딩끝, 업데이트 완료\n\n  state = {}\n\n  // componentWillMount(){ \n    // console.log('1');\n    // fetch('https://yts.mx/api/v2/list_movies.json?quality=3D?sort_by=rating') //ajax==fetch (latest js), log result: promise\n    // .then(res => res.json())\n    // .then(json => \n    //   this.setState({\n    //     movies: json.data.movies\n    //   })\n    // )\n    // .catch(err => console.log(err))\n  // };\n  \n  componentDidMount() {\n    this._getMovies();\n    // console.log('3');\n  };\n\n  _renderMovies = () => {\n    console.log( this.state.movies  )\n    const movies = this.state.movies.map(movie => {\n      console.log(movie);\n      return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n\n    return movies;\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    console.log(movies)\n    this.setState({\n      movies // == movies: movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.mx/api/v2/list_movies.json?quality=3D?sort_by=download_count') //ajax==fetch (latest js), log result: promise\n    .then(res => res.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    // console.log('2');\n    console.log(this.state.movies)\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        { movies ? this._renderMovies() : 'Loading' }\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}